import { describe, expect, test } from "vitest";
import { getVisibleGridsList } from "./getVisibleGridsList";
import { GridMap } from "./grid-map";
import { GridMapFromArray } from "./GridMapFromArray";
import { FindPointsInsideAllConvexPolygons } from "./PointsInsideAllConvexPolygons";
import { VisibleGridsMatrix } from "./VisibleGridsMatrix";
import map from "./屏幕截图-2023-11-24-162727_结果_结果test.json";


describe("PointsInsideAllConvexPolygons", () => {
    test("测试点在一个凸多边形内部", () => {
        const gridmap: GridMap = GridMapFromArray(map);
        const visibleGridsMatrix = VisibleGridsMatrix(
            getVisibleGridsList(gridmap),
        );

        const result = FindPointsInsideAllConvexPolygons(
            gridmap,
            visibleGridsMatrix,
        );
        // console.log(result);
        expect(new Set(result)).toEqual(
            new Set([
                [+1, +10],
                [+1, +11],
                [+1, +12],
                [+1, +17],
                [+1, +18],
                [+1, +19],
                [+1, +20],
                [+1, +4],
                [+1, +5],
                [+1, +6],
                [+1, +7],
                [+1, +8],
                [+1, +9],
                [+10, +11],
                [+10, +19],
                [+10, +20],
                [+11, +17],
                [+11, +18],
                [+11, +19],
                [+11, +20],
                [+12, +10],
                [+12, +20],
                [+12, +6],
                [+12, +7],
                [+12, +8],
                [+12, +9],
                [+13, +13],
                [+13, +14],
                [+13, +20],
                [+13, +6],
                [+13, +7],
                [+13, +8],
                [+14, +14],
                [+14, +20],
                [+14, +7],
                [+15, +14],
                [+15, +20],
                [+16, +13],
                [+16, +14],
                [+16, +19],
                [+16, +20],
                [+16, +8],
                [+17, +13],
                [+17, +14],
                [+17, +20],
                [+17, +4],
                [+17, +6],
                [+17, +7],
                [+17, +8],
                [+18, +13],
                [+18, +14],
                [+18, +19],
                [+18, +20],
                [+18, +6],
                [+18, +7],
                [+18, +8],
                [+19, +13],
                [+19, +14],
                [+19, +20],
                [+19, +5],
                [+19, +6],
                [+19, +7],
                [+19, +8],
                [+2, +11],
                [+2, +18],
                [+2, +19],
                [+2, +20],
                [+20, +13],
                [+20, +14],
                [+20, +4],
                [+20, +5],
                [+20, +6],
                [+20, +7],
                [+20, +8],
                [+21, +14],
                [+21, +15],
                [+21, +20],
                [+21, +4],
                [+21, +5],
                [+21, +6],
                [+21, +7],
                [+21, +8],
                [+3, +19],
                [+3, +20],
                [+4, +11],
                [+4, +12],
                [+4, +20],
                [+5, +11],
                [+5, +12],
                [+5, +13],
                [+5, +16],
                [+5, +17],
                [+5, +5],
                [+5, +6],
                [+6, +11],
                [+6, +12],
                [+6, +13],
                [+6, +16],
                [+6, +17],
                [+6, +4],
                [+6, +5],
                [+6, +6],
                [+7, +11],
                [+7, +12],
                [+7, +13],
                [+7, +14],
                [+7, +15],
                [+7, +17],
                [+7, +8],
                [+8, +10],
                [+8, +11],
                [+8, +17],
                [+8, +9],
                [+9, +10],
                [+9, +11],
            ]),
        );
    });
});
